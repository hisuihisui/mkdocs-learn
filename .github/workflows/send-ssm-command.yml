name: Execute Fixed Commands on EC2 via SSM

on:
  workflow_dispatch: # 手動でワークフローを実行可能にする
  # push: # 特定のブランチへのpush時に実行する場合
  #   branches:
  #     - main

env:
  # 環境変数を定義
  EC2_INSTANCE_NAME: "test-mkdocs" # EC2インスタンスの名前タグ
  AWS_REGION: "ap-northeast-1" # AWSリージョンを指定

jobs:
  execute-fixed-ssm-command:
    runs-on: ubuntu-latest
    permissions:
      id-token: write # AWS OIDC認証に必要
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.IAM_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: describe instance id
        id: describe-instance-id
        run: |
          INSTANCE_ID=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=${{ env.EC2_INSTANCE_NAME }}" \
            --query "Reservations[].Instances[].InstanceId" \
            --output text)
          echo "INSTANCE_ID=${INSTANCE_ID}" >> $GITHUB_ENV

      - name: Send SSM Command with Fixed Script
        env:
          # GitHub Secretsの値を環境変数として設定
          # これにより、aws ssm send-command の --parameters でシェルスクリプトに変数を渡せる
          MY_SECRET_VALUE_ON_EC2: ${{ secrets.MY_SECRET_VALUE }}
        run: |
          echo "Sending commands to instance: ${{ secrets.EC2_INSTANCE_ID }}"

          COMMAND_ID=$(aws ssm send-command \
            --instance-ids "${{ env.INSTANCE_ID }}" \
            --document-name "AWS-RunShellScript" \
            --parameters 'commands=[
              "echo '"$MY_SECRET_VALUE_ON_EC2"' > /tmp/actions.log",
              exit 1,
            ]' \
            --comment "GitHub Actions: Execute Fixed Script" \
            --query "Command.CommandId" \
            --output text)

          if [ -z "$COMMAND_ID" ]; then
            echo "Failed to send command"
            exit 1
          fi

          echo COMMAND_ID=$COMMAND_ID >> $GITHUB_ENV

      - name: Wait for Command Execution
        run: |
          aws ssm wait command-executed --command-id ${{ env.COMMAND_ID }} --instance-id ${{ env.INSTANCE_ID }}
        continue-on-error: true

      - name: Fetch Command Output
        run: |
          echo "Command execution completed. Fetching output..."
          aws ssm get-command-invocation \
            --command-id ${{ env.COMMAND_ID }} \
            --instance-id "${{ env.INSTANCE_ID }}" \
            --query "{StandardOutputContent:StandardOutputContent, StandardErrorContent:StandardErrorContent, Status:Status}" \
            --output json | jq --raw-output \
          'echo "Full invocation JSON: \(.)" >&2;
          if .Status == "Failed" then
              ("::error::SSM Command Status is Failed. Details: \(.)" | stderr),
              halt_error(1)
          else
            .Status
          end'

          echo "SSM Command Status was not Failed."
